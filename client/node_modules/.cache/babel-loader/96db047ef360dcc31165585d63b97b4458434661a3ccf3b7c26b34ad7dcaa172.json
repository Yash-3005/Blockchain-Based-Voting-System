{"ast":null,"code":"var _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { db } from './firebaseConfig';\nimport { collection, addDoc, onSnapshot } from \"firebase/firestore\";\nimport VotingArtifact from './contracts/Voting.json';\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nfunction App() {\n  _s();\n  // ... existing state declarations\n\n  // Wrap in useCallback to prevent unnecessary recreations\n  const saveVoteToDB = useCallback(async candidateId => {\n    try {\n      await addDoc(collection(db, \"votes\"), {\n        candidateId,\n        voter: account,\n        timestamp: new Date()\n      });\n    } catch (e) {\n      console.error(\"Error saving vote: \", e);\n      setError(\"Failed to save vote record\");\n    }\n  }, [account]); // Add account as dependency\n\n  // Add contract initialization and data loading\n  useEffect(() => {\n    const initContract = async () => {\n      try {\n        if (!window.ethereum) throw new Error(\"Install MetaMask!\");\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, VotingArtifact.abi, signer);\n        setContract(contract);\n        await loadCandidates(contract);\n\n        // Handle account changes\n        const handleAccountsChanged = accounts => {\n          setAccount(accounts[0] || '');\n          window.location.reload();\n        };\n        window.ethereum.on('accountsChanged', handleAccountsChanged);\n        return () => {\n          window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        };\n      } catch (err) {\n        console.error(\"Initialization error:\", err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    initContract();\n  }, []);\n\n  // Firebase real-time updates\n  useEffect(() => {\n    if (!db) {\n      console.error(\"Firebase not initialized!\");\n      return;\n    }\n    const unsubscribe = onSnapshot(collection(db, \"votes\"), snapshot => {\n      snapshot.docChanges().forEach(change => {\n        if (change.type === \"added\") {\n          console.log(\"New vote:\", change.doc.data());\n        }\n      });\n    });\n    return () => unsubscribe();\n  }, []);\n} // Empty dependency array for one-time setup\n_s(App, \"d44zu40Zuc2mXYPSqoK3cZmAh2Q=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useCallback","ethers","db","collection","addDoc","onSnapshot","VotingArtifact","contractAddress","App","_s","saveVoteToDB","candidateId","voter","account","timestamp","Date","e","console","error","setError","initContract","window","ethereum","Error","provider","BrowserProvider","signer","getSigner","contract","Contract","abi","setContract","loadCandidates","handleAccountsChanged","accounts","setAccount","location","reload","on","removeListener","err","message","setLoading","unsubscribe","snapshot","docChanges","forEach","change","type","log","doc","data","_c","$RefreshReg$"],"sources":["D:/5th Sem/Minor Project/Decentralized-Voting-System/client/src/App.jsx"],"sourcesContent":["import './App.css';\nimport { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { db } from './firebaseConfig';\nimport { collection, addDoc, onSnapshot } from \"firebase/firestore\";\nimport VotingArtifact from './contracts/Voting.json';\n\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\nfunction App() {\n  // ... existing state declarations\n\n  // Wrap in useCallback to prevent unnecessary recreations\n  const saveVoteToDB = useCallback(async (candidateId) => {\n    try {\n      await addDoc(collection(db, \"votes\"), {\n        candidateId,\n        voter: account,\n        timestamp: new Date()\n      });\n    } catch (e) {\n      console.error(\"Error saving vote: \", e);\n      setError(\"Failed to save vote record\");\n    }\n  }, [account]); // Add account as dependency\n\n  // Add contract initialization and data loading\n  useEffect(() => {\n    const initContract = async () => {\n      try {\n        if (!window.ethereum) throw new Error(\"Install MetaMask!\");\n\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(\n          contractAddress,\n          VotingArtifact.abi,\n          signer\n        );\n        \n        setContract(contract);\n        await loadCandidates(contract);\n        \n        // Handle account changes\n        const handleAccountsChanged = (accounts) => {\n          setAccount(accounts[0] || '');\n          window.location.reload();\n        };\n\n        window.ethereum.on('accountsChanged', handleAccountsChanged);\n        \n        return () => {\n          window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        };\n      } catch (err) {\n        console.error(\"Initialization error:\", err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    initContract();\n  }, []);\n\n  // Firebase real-time updates\n  useEffect(() => {\n    if (!db) {\n      console.error(\"Firebase not initialized!\");\n      return;\n    }\n\n    const unsubscribe = onSnapshot(collection(db, \"votes\"), (snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === \"added\") {\n          console.log(\"New vote:\", change.doc.data());\n        }\n      });\n    });\n\n    return () => unsubscribe();\n  }, []);} // Empty dependency array for one-time setup\n\n "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { db } from './FirebaseConfig';\nimport { collection, addDoc, onSnapshot } from \"firebase/firestore\";\nimport VotingArtifact from './contracts/Voting.json';\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [contract, setContract] = useState(null);\n  const [candidates, setCandidates] = useState([]);\n  const [totalVotes, setTotalVotes] = useState(0);\n  const [recentVotes, setRecentVotes] = useState([]);\n\n  // Load candidates from contract\n  const loadCandidates = useCallback(async contractInstance => {\n    try {\n      setLoading(true);\n      const count = await contractInstance.candidateCount();\n      const loadedCandidates = [];\n      let votes = 0;\n      for (let i = 1; i <= count; i++) {\n        const candidate = await contractInstance.candidates(i);\n        loadedCandidates.push({\n          id: i,\n          name: candidate.name,\n          voteCount: candidate.voteCount.toString()\n        });\n        votes += parseInt(candidate.voteCount.toString());\n      }\n      setCandidates(loadedCandidates);\n      setTotalVotes(votes);\n      setLoading(false);\n    } catch (err) {\n      console.error(\"Error loading candidates:\", err);\n      setError(\"Failed to load candidates\");\n      setLoading(false);\n    }\n  }, []);\n\n  // Save vote to Firebase\n  const saveVoteToDB = useCallback(async candidateId => {\n    try {\n      await addDoc(collection(db, \"votes\"), {\n        candidateId,\n        voter: account,\n        timestamp: new Date()\n      });\n    } catch (e) {\n      console.error(\"Error saving vote: \", e);\n      setError(\"Failed to save vote record\");\n    }\n  }, [account]);\n\n  // Handle voting\n  const vote = useCallback(async candidateId => {\n    try {\n      setLoading(true);\n      const tx = await contract.vote(candidateId);\n      await tx.wait();\n      await saveVoteToDB(candidateId);\n      await loadCandidates(contract);\n    } catch (err) {\n      console.error(\"Error voting:\", err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [contract, saveVoteToDB, loadCandidates]);\n\n  // Initialize contract and load data\n  useEffect(() => {\n    const initContract = async () => {\n      try {\n        if (!window.ethereum) throw new Error(\"Please install MetaMask!\");\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, VotingArtifact.abi, signer);\n        setContract(contract);\n        await loadCandidates(contract);\n\n        // Get initial account\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n        }\n\n        // Handle account changes\n        window.ethereum.on('accountsChanged', accounts => {\n          setAccount(accounts[0] || '');\n          window.location.reload();\n        });\n      } catch (err) {\n        console.error(\"Initialization error:\", err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    initContract();\n  }, [loadCandidates]);\n\n  // Firebase real-time updates\n  useEffect(() => {\n    if (!db) return;\n    const unsubscribe = onSnapshot(collection(db, \"votes\"), snapshot => {\n      const newVotes = [];\n      snapshot.docChanges().forEach(change => {\n        if (change.type === \"added\") {\n          newVotes.push(change.doc.data());\n        }\n      });\n      setRecentVotes(prev => [...newVotes, ...prev].slice(0, 5));\n    });\n    return () => unsubscribe();\n  }, []);\n\n  // ... rest of your component code\n}\n_s(App, \"HiXvapt8WJ1mwtROkkvQYHi6dK8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","useCallback","ethers","db","collection","addDoc","onSnapshot","VotingArtifact","contractAddress","App","_s","account","setAccount","error","setError","loading","setLoading","contract","setContract","candidates","setCandidates","totalVotes","setTotalVotes","recentVotes","setRecentVotes","loadCandidates","contractInstance","count","candidateCount","loadedCandidates","votes","i","candidate","push","id","name","voteCount","toString","parseInt","err","console","saveVoteToDB","candidateId","voter","timestamp","Date","e","vote","tx","wait","message","initContract","window","ethereum","Error","provider","BrowserProvider","signer","getSigner","Contract","abi","accounts","request","method","length","on","location","reload","unsubscribe","snapshot","newVotes","docChanges","forEach","change","type","doc","data","prev","slice","_c","$RefreshReg$"],"sources":["D:/5th Sem/Minor Project/Decentralized-Voting-System/client/src/App.jsx"],"sourcesContent":["import './App.css';\nimport { useState, useEffect, useCallback } from 'react';\nimport { ethers } from 'ethers';\nimport { db } from './FirebaseConfig';\nimport { collection, addDoc, onSnapshot } from \"firebase/firestore\";\nimport VotingArtifact from './contracts/Voting.json';\n\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\nfunction App() {\n  const [account, setAccount] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [contract, setContract] = useState(null);\n  const [candidates, setCandidates] = useState([]);\n  const [totalVotes, setTotalVotes] = useState(0);\n  const [recentVotes, setRecentVotes] = useState([]);\n\n  // Load candidates from contract\n  const loadCandidates = useCallback(async (contractInstance) => {\n    try {\n      setLoading(true);\n      const count = await contractInstance.candidateCount();\n      const loadedCandidates = [];\n      let votes = 0;\n      \n      for (let i = 1; i <= count; i++) {\n        const candidate = await contractInstance.candidates(i);\n        loadedCandidates.push({\n          id: i,\n          name: candidate.name,\n          voteCount: candidate.voteCount.toString()\n        });\n        votes += parseInt(candidate.voteCount.toString());\n      }\n      \n      setCandidates(loadedCandidates);\n      setTotalVotes(votes);\n      setLoading(false);\n    } catch (err) {\n      console.error(\"Error loading candidates:\", err);\n      setError(\"Failed to load candidates\");\n      setLoading(false);\n    }\n  }, []);\n\n  // Save vote to Firebase\n  const saveVoteToDB = useCallback(async (candidateId) => {\n    try {\n      await addDoc(collection(db, \"votes\"), {\n        candidateId,\n        voter: account,\n        timestamp: new Date()\n      });\n    } catch (e) {\n      console.error(\"Error saving vote: \", e);\n      setError(\"Failed to save vote record\");\n    }\n  }, [account]);\n\n  // Handle voting\n  const vote = useCallback(async (candidateId) => {\n    try {\n      setLoading(true);\n      const tx = await contract.vote(candidateId);\n      await tx.wait();\n      await saveVoteToDB(candidateId);\n      await loadCandidates(contract);\n    } catch (err) {\n      console.error(\"Error voting:\", err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [contract, saveVoteToDB, loadCandidates]);\n\n  // Initialize contract and load data\n  useEffect(() => {\n    const initContract = async () => {\n      try {\n        if (!window.ethereum) throw new Error(\"Please install MetaMask!\");\n\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(\n          contractAddress,\n          VotingArtifact.abi,\n          signer\n        );\n        \n        setContract(contract);\n        await loadCandidates(contract);\n        \n        // Get initial account\n        const accounts = await window.ethereum.request({ method: 'eth_accounts' });\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n        }\n\n        // Handle account changes\n        window.ethereum.on('accountsChanged', (accounts) => {\n          setAccount(accounts[0] || '');\n          window.location.reload();\n        });\n        \n      } catch (err) {\n        console.error(\"Initialization error:\", err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    initContract();\n  }, [loadCandidates]);\n\n  // Firebase real-time updates\n  useEffect(() => {\n    if (!db) return;\n\n    const unsubscribe = onSnapshot(collection(db, \"votes\"), (snapshot) => {\n      const newVotes = [];\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === \"added\") {\n          newVotes.push(change.doc.data());\n        }\n      });\n      setRecentVotes(prev => [...newVotes, ...prev].slice(0, 5));\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  // ... rest of your component code\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
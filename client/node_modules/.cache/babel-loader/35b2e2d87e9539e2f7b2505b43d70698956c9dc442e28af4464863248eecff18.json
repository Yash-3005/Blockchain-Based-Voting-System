{"ast":null,"code":"var _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { db } from './firebaseConfig';\nimport { collection, addDoc, onSnapshot } from \"firebase/firestore\";\nimport VotingArtifact from './contracts/Voting.json';\n\n// Use consistent contract address (update with your actual deployed address)\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\nfunction App() {\n  _s();\n  // ... existing state declarations\n\n  // Add Firebase vote saving function\n  const saveVoteToDB = async candidateId => {\n    try {\n      await addDoc(collection(db, \"votes\"), {\n        candidateId,\n        voter: account,\n        timestamp: new Date(),\n        network: \"localhost\",\n        contractAddress\n      });\n      console.log(\"Vote saved to database\");\n    } catch (e) {\n      console.error(\"Error saving vote to DB: \", e);\n      setError(\"Failed to save vote record\");\n    }\n  };\n\n  // Add real-time updates listener\n  useEffect(() => {\n    if (!contract) return;\n    const unsubscribe = onSnapshot(collection(db, \"votes\"), snapshot => {\n      snapshot.docChanges().forEach(change => {\n        if (change.type === \"added\") {\n          console.log(\"New vote:\", change.doc.data());\n        }\n      });\n    });\n    return () => unsubscribe();\n  }, [contract]);\n\n  // Enhanced initialization\n  useEffect(() => {\n    const init = async () => {\n      try {\n        if (!window.ethereum) throw new Error(\"Install MetaMask!\");\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const contract = new ethers.Contract(contractAddress, VotingArtifact.abi, signer);\n\n        // Initial data loading\n        await loadCandidates(contract);\n        await checkVoteStatus(contract, accounts[0]);\n        setContract(contract);\n\n        // Network verification\n        const network = await provider.getNetwork();\n        console.log(\"Connected to:\", network.name, network.chainId);\n      } catch (err) {\n        console.error(\"Initialization failed:\", err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    init();\n\n    // ... existing account change handlers\n  }, []);\n\n  // ... rest of the component remains the same\n}\n_s(App, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ethers","db","collection","addDoc","onSnapshot","VotingArtifact","contractAddress","App","_s","saveVoteToDB","candidateId","voter","account","timestamp","Date","network","console","log","e","error","setError","contract","unsubscribe","snapshot","docChanges","forEach","change","type","doc","data","init","window","ethereum","Error","accounts","request","method","setAccount","provider","BrowserProvider","signer","getSigner","Contract","abi","loadCandidates","checkVoteStatus","setContract","getNetwork","name","chainId","err","message","setLoading","_c","$RefreshReg$"],"sources":["D:/5th Sem/Minor Project/Decentralized-Voting-System/client/src/App.jsx"],"sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { db } from './firebaseConfig';\nimport { collection, addDoc, onSnapshot } from \"firebase/firestore\";\nimport VotingArtifact from './contracts/Voting.json';\n\n// Use consistent contract address (update with your actual deployed address)\nconst contractAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\";\n\nfunction App() {\n  // ... existing state declarations\n\n  // Add Firebase vote saving function\n  const saveVoteToDB = async (candidateId) => {\n    try {\n      await addDoc(collection(db, \"votes\"), {\n        candidateId,\n        voter: account,\n        timestamp: new Date(),\n        network: \"localhost\",\n        contractAddress\n      });\n      console.log(\"Vote saved to database\");\n    } catch (e) {\n      console.error(\"Error saving vote to DB: \", e);\n      setError(\"Failed to save vote record\");\n    }\n  };\n\n  // Add real-time updates listener\n  useEffect(() => {\n    if (!contract) return;\n\n    const unsubscribe = onSnapshot(collection(db, \"votes\"), (snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === \"added\") {\n          console.log(\"New vote:\", change.doc.data());\n        }\n      });\n    });\n\n    return () => unsubscribe();\n  }, [contract]);\n\n  // Enhanced initialization\n  useEffect(() => {\n    const init = async () => {\n      try {\n        if (!window.ethereum) throw new Error(\"Install MetaMask!\");\n        \n        const accounts = await window.ethereum.request({ \n          method: 'eth_requestAccounts' \n        });\n        setAccount(accounts[0]);\n        \n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        \n        const contract = new ethers.Contract(\n          contractAddress,\n          VotingArtifact.abi,\n          signer\n        );\n\n        // Initial data loading\n        await loadCandidates(contract);\n        await checkVoteStatus(contract, accounts[0]);\n        \n        setContract(contract);\n        \n        // Network verification\n        const network = await provider.getNetwork();\n        console.log(\"Connected to:\", network.name, network.chainId);\n\n      } catch (err) {\n        console.error(\"Initialization failed:\", err);\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    init();\n\n    // ... existing account change handlers\n  }, []);\n\n  // ... rest of the component remains the same\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}